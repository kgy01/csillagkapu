Minden fuggveny visszatereset a ret()-fuggvenybe kell csomagolni, ezz magaba foglalja az endFunctiont(), ezert azt mar nem kel leirni a return elott.
Ha egy fugvenynek nincs visszateresi erteke (void) akkor pedig az endFunction(String text) fuggvenyt hasznaljatok, ahol a text helyere ""-t irjatok, vagy voidot. 

FONTOSS!!!!! ----> MINDEN OSZTALYBA : import static malmo.csillagkapu.util.Logger.*;

PELDA:

public class Door extends LandObject {

...

public Door(Scale _scale){
        beginFunction();
        scale = _scale;
        endFunction("");
    }

...

    public void open(){
        beginFunction();
        isClosed = false;
        endFunction("");
    }

    public void close(){
        beginFunction();
        isClosed = true;
        endFunction("");
    }

    public Scale createScale(){
        beginFunction();
        scale =  new Scale(this);
        return ret(scale);
    }

    public Scale getScale(){
        beginFunction();
        if(scale == null) {
            scale = new Scale(this);
        }
        return ret(scale);
    }

...

}


MAIN:

public static void main(String [ ] args)
    {
        Door door = new Door();
        Scale scale = door.getScale();
        door.close();
        door.open();
    }



OUTPUT:

-->[Door]:getScale()
  -->[Door]:createScale()
    -->[Scale]:<init>()
    <--
  <--csillagkapu.Scale@1540e19d
<--csillagkapu.Scale@1540e19d
-->[Door]:close()
<--
-->[Door]:open()
<--


Ha felulirjatok az osztajok toString fugvenyeit akkor csillagkapu.Scale@1540e19d helyet barmit kilehet irni:


SCALE: 
...
@Override
    public String toString(){
        return "barmi";
    }
...


OUTPUT:

-->[Door]:getScale()
  -->[Door]:createScale()
    -->[Scale]:<init>()
    <--
  <--barmi
<--barmi
-->[Door]:close()
<--
-->[Door]:open()
<--







